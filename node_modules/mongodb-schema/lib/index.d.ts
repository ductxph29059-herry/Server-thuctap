import { SchemaAnalyzer } from './schema-analyzer';
import type { ArraySchemaType, BaseSchemaType, ConstantSchemaType, DocumentSchemaType, PrimitiveSchemaType, SchemaType, Schema, SchemaField, SchemaParseOptions, SimplifiedSchemaBaseType, SimplifiedSchemaArrayType, SimplifiedSchemaDocumentType, SimplifiedSchemaType, SimplifiedSchemaField, SimplifiedSchema } from './schema-analyzer';
import * as schemaStats from './stats';
type AnyIterable<T = any> = Iterable<T> | AsyncIterable<T>;
declare function parseSchema(source: AnyIterable, options?: SchemaParseOptions): Promise<Schema>;
declare function getSchemaPaths(source: AnyIterable): Promise<string[][]>;
declare function getSimplifiedSchema(source: AnyIterable): Promise<SimplifiedSchema>;
export default parseSchema;
export type { ArraySchemaType, BaseSchemaType, ConstantSchemaType, DocumentSchemaType, PrimitiveSchemaType, SchemaType, Schema, SchemaField, SchemaParseOptions, SimplifiedSchemaBaseType, SimplifiedSchemaArrayType, SimplifiedSchemaDocumentType, SimplifiedSchemaType, SimplifiedSchemaField, SimplifiedSchema };
export { parseSchema, getSchemaPaths, getSimplifiedSchema, SchemaAnalyzer, schemaStats };
