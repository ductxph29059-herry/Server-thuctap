/// <reference types="node" />
import { Duplex } from 'stream';
type BaseSchemaType = {
    path: string;
    count: number;
    probability: number;
    has_duplicates: boolean;
    unique: number;
};
type ConstantSchemaType = BaseSchemaType & {
    name: 'Null' | 'Undefined';
};
export type PrimitiveSchemaType = BaseSchemaType & {
    name: 'String' | 'Number' | 'Int32' | 'Boolean' | 'Decimal128' | 'Long' | 'ObjectID' | 'Date' | 'RegExp' | 'Symbol' | 'MaxKey' | 'MinKey' | 'Binary' | 'Code' | 'Timestamp' | 'DBRef';
    values: any[];
};
export type ArraySchemaType = BaseSchemaType & {
    name: 'Array';
    lengths: number[];
    average_length: number;
    total_count: number;
    types: SchemaType[];
};
export type DocumentSchemaType = BaseSchemaType & {
    name: 'Document';
    fields: SchemaField[];
};
export type SchemaType = ConstantSchemaType | PrimitiveSchemaType | ArraySchemaType | DocumentSchemaType;
export type SchemaField = {
    name: string;
    count: number;
    path: string;
    type: string | string[];
    probability: number;
    has_duplicates: boolean;
    types: SchemaType[];
};
export type Schema = {
    count: number;
    fields: SchemaField[];
};
type SemanticTypeFunction = ((value: string, path?: string) => boolean);
type SemanticTypeMap = {
    [typeName: string]: SemanticTypeFunction | boolean;
};
export type SchemaParseOptions = {
    semanticTypes?: boolean | SemanticTypeMap;
    storeValues?: boolean;
};
declare function parse(options?: SchemaParseOptions): Duplex;
export default parse;
